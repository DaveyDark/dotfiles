{
  "Named export functional component with TypeScript": {
    "prefix": "rfcts",
    "body": [
      "interface $1Props {",
      "  $2",
      "}",
      "",
      "export function $1({ $2 }: $1Props) {",
      "  return (",
      "    <div>",
      "      $3",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Named functional component with TypeScript props"
  },
  "useState Hook": {
    "prefix": "ust",
    "body": [
      "const [${1:state}, set${2:setState}] = useState(${3:initialValue});"
    ],
    "description": "React useState hook"
  },
  "useState with TypeScript": {
    "prefix": "ustt",
    "body": [
      "const [${1:state}, set${2:setState}] = useState<${3:type}>(${4:initialValue});"
    ],
    "description": "Typed useState hook"
  },
  "useEffect Hook": {
    "prefix": "uef",
    "body": [
      "useEffect(() => {",
      "  ${1:effect}",
      "  return () => {",
      "    ${2:cleanup}",
      "  };",
      "}, [${3:dependencies}]);"
    ],
    "description": "React useEffect hook with cleanup"
  },
  "React Router Link": {
    "prefix": "rlink",
    "body": ["<Link to=\"${1:/path}\">${2:Link Text}</Link>"],
    "description": "React Router Link component"
  },
  "React Router Route": {
    "prefix": "rroute",
    "body": ["<Route path=\"${1:/path}\" element={<${2:Component} />} />"],
    "description": "React Router Route component"
  },
  "React Context Provider": {
    "prefix": "ctx",
    "body": [
      "interface ${1:Context}Type {",
      "  ${2:value}: string;",
      "}",
      "",
      "const ${1:Context} = createContext<${1:Context}Type | null>(null);",
      "",
      "export function ${3:Provider}({ children }: { children: React.ReactNode }) {",
      "  return (",
      "    <${1:Context}.Provider value={{ ${2:value}: 'default' }}>",
      "      {children}",
      "    </${1:Context}.Provider>",
      "  );",
      "}"
    ],
    "description": "Create React context with TypeScript"
  },
  "APICall with useEffect": {
    "prefix": "rapi",
    "body": [
      "const [data, setData] = useState<${1:DataType} | null>(null);",
      "const [loading, setLoading] = useState(true);",
      "const [error, setError] = useState<Error | null>(null);",
      "",
      "useEffect(() => {",
      "  const fetchData = async () => {",
      "    try {",
      "      const response = await fetch('${2:url}');",
      "      const json = await response.json();",
      "      setData(json);",
      "    } catch (err) {",
      "      setError(err as Error);",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  };",
      "",
      "  fetchData();",
      "}, []);"
    ],
    "description": "API call pattern with useEffect"
  }
}
